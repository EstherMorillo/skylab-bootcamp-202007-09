/* eslint-disable no-underscore-dangle */
const express = require('express');

const heroRouter = express.Router();

function routes(Hero) {
	heroRouter
		.route('/')

		.post((req, res) => {
			const hero = new Hero(req.body);
			hero.save();
			res.status(201).json(hero);
		})
		.get((req, res) => {
			const query = {};
			if (req.query.id) {
				// http://localhost:4200/heroes?id=13
				query.id = req.query.id;
			}
			if (req.query.name) {
				query.name = req.query.name;
			}
			Hero.find(query, (error, heroes) => {
				if (error) {
					res.send(error);
				}
				res.json(heroes);
			});
		});

	heroRouter
		.use('/:heroId', (req, res, next) => {
			Hero.findById(req.params.heroId, (error, hero) => {
				if (error) {
					res.send(error);
				}
				if (hero) {
					res.hero = hero;
					next();
				} else {
					res.sendStatus(404);
				}
			});
		})
		.put((req, res) => {
			// retrive a hero, get the new values and store them
			const { hero } = req;
			if (hero) {
				// eslint-disable-next-line no-param-reassign
				hero.name = req.body.name;
				hero.save((err) => {
					if (err) {
						res.send(err);
					}
					res.json(hero);
				});
			}
		})
		.patch((req, res) => {
			/**
			 * retrieve object
			 * if _id in object, delete from object
			 * for each property in body, update model
			 *
			 * save model
			 */
			const { hero } = req;
			if (hero) {
				if (req.body._id) {
					delete req.body._id;
				}
				Object.entries(req.body).forEach((item) => {
					const key = item[0];
					const value = item[1];
					// eslint-disable-next-line no-param-reassign
					hero[key] = value;
				});
				hero.save((err) => {
					if (err) {
						res.send(err);
					}
					res.json(hero);
				});
			}
		})

		.delete((req, res) => {
			const { hero } = req;
			if (hero) {
				hero.remove((err) => {
					if (err) {
						res.send(err);
					}
					res.json(hero);
				});
			}
		})
		.get((req, res) => {
			// res.send('Hero Id works');
			const { hero } = req;
			res.json(hero);
		});

	return heroRouter;
}

module.exports = routes;
